#\DeclareLyXModule[algpseudocode.sty]{Pseudocode}
#DescriptionBegin
# Adds support for pseudocode code listings as defined by the algorithmicx package.
# For more details, see Pseudocode.lyx.
# Package(s) required: algorithmicx.sty.
#DescriptionEnd
# Author: Paul A. Rubin <rubin@msu.edu>
Format 66
Preamble
    \usepackage{algpseudocode}
EndPreamble
#
# ----- Containers -----
#
# The Algorithm environment is the container for all pseudocode.
#
Style Algorithm
  Category "Pseudocode"
  LatexType Environment
  LatexName "algorithmic"
  KeepEmpty 1
  Argument 1
    LabelString "Line numbering"
    MenuString "Set line numbering"
    Tooltip "0 for no line number, n for line numbers in multiples of n"
    Mandatory 0
    Decoration conglomerate
    AutoInsert 1
  EndArgument
  AutoNests
    State, Function, EndFunction, Procedure, EndProcedure,
    For, EndFor, Loop, EndLoop, Repeat, Until, While, EndWhile,
    If, "Else If", Else, EndIf, Ensure, Require, Call, Statex, Return
  EndAutoNests
  LabelType Above
  LabelString "Begin algorithm"
  EndLabelType Static
  EndLabelString "End algorithm"
  LabelFont
    Color green
    Series bold
  EndFont
End
#
# These two commands implement functions.
#
Style Function
  Category "Pseudocode"
  LatexType Command
  LatexName "Function"
  LabelType Static
  LabelString "Function "
  Margin Dynamic
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "name"
    MenuString "Enter the function name"
    Tooltip "Specify a name for the function"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
  Argument 2
    LabelString "parameters"
    MenuString "List the arguments of the function"
    Tooltip "Specify the arguments of the function"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
Style "EndFunction"
  Category "Pseudocode"
  LatexType Command
  LatexName "EndFunction"
  LabelType Static
  LabelString "End Function"
  Margin Dynamic
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
End
#
# These two commands implement procedures.
#
Style Procedure
  Category "Pseudocode"
  LatexType Command
  LatexName "Procedure"
  LabelType Static
  LabelString "Procedure "
  Margin Dynamic
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "name"
    MenuString "Enter the procedure name"
    Tooltip "Specify a name for the procedure"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
  Argument 2
    LabelString "parameters"
    MenuString "List the arguments of the procedure"
    Tooltip "Specify the arguments of the procedure"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
Style "EndProcedure"
  Category "Pseudocode"
  LatexType Command
  LatexName "EndProcedure"
  LabelType Static
  LabelString "End Procedure"
  Margin Dynamic
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
End
#
# ----- Looping -----
#
# These two commands implement for loops.
#
Style For
  Category "Looping"
  LatexType Command
  LatexName "For"
  LabelType Static
  Margin Dynamic
  LabelString "For "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "loop condition"
    MenuString "Set loop condition"
    Tooltip "Specify the conditions for iterating"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
Style "EndFor"
  Category "Looping"
  LatexType Command
  LatexName "EndFor"
  LabelType Static
  LabelString "End For"
  Margin Dynamic
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
End
#
# These two commands implement plain loops.
#
Style Loop
  Category "Looping"
  LatexType Command
  LatexName "Loop"
  LabelType Static
  Margin Dynamic
  LabelString "Loop "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
End
Style "EndLoop"
  Category "Looping"
  LatexType Command
  LatexName "EndLoop"
  LabelType Static
  LabelString "End Loop"
  Margin Dynamic
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
End
#
# These two commands implement repeat blocks.
#
Style Repeat
  Category "Looping"
  LatexType Command
  LatexName "Repeat"
  LabelType Static
  Margin Dynamic
  LabelString "Repeat "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
End
Style Until
  Category "Looping"
  LatexType Command
  LatexName "Until"
  LabelType Static
  Margin Dynamic
  LabelString "Until "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "termination condition"
    MenuString "Set termination condition"
    Tooltip "Specify the conditions for terminating the loop"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
#
# These two commands implement while loops.
#
Style While
  Category "Looping"
  LatexType Command
  LatexName "While"
  LabelType Static
  Margin Dynamic
  LabelString "While "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "loop condition"
    MenuString "Set loop condition"
    Tooltip "Specify the conditions for iterating"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
Style EndWhile
  Category "Looping"
  LatexType Command
  LatexName "EndWhile"
  LabelType Static
  Margin Dynamic
  LabelString "End While "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
End
#
# ----- Conditional code -----
#
# These commands implement if blocks.
#
Style If
  Category "Conditional"
  LatexType Command
  LatexName "If"
  LabelType Static
  Margin Dynamic
  LabelString "If "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "condition"
    MenuString "Set the condition"
    Tooltip "Specify the condition for executing subsequent instructions"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
Style "Else if"
  Category "Conditional"
  LatexType Command
  LatexName "ElsIf"
  LabelType Static
  Margin Dynamic
  LabelString "Else if "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    If
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "condition"
    MenuString "Set the condition"
    Tooltip "Specify the condition for executing subsequent instructions"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
Style Else
  Category "Conditional"
  LatexType Command
  LatexName "Else"
  LabelType Static
  Margin Dynamic
  LabelString "Else "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    If
  EndIsAutoNestedBy
  KeepEmpty 1
End
Style EndIf
  Category "Conditional"
  LatexType Command
  LatexName "EndIf"
  LabelType Static
  Margin Dynamic
  LabelString "End If "
  LabelFont
    Color green
    Series bold
  EndFont
  IsAutoNestedBy
    If
  EndIsAutoNestedBy
  KeepEmpty 1
End
#
# ----- Statements -----
#
#
# This implements a procedure call.
#
Style Call
  Category "Statements"
  LatexType Command
  LatexName "statecall"
  Preamble
    \newcommand{\statecall}[2]{\State \Call{#1}{#2}}
  EndPreamble
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Call  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
  Argument 1
    LabelString "name"
    MenuString "Insert procedure name"
    Tooltip "Specify the name of the procedure to call"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
  Argument 2
    LabelString "arguments"
    MenuSTring "Insert arguments"
    Tooltip "Specify arguments for the call"
    Mandatory 1
    Decoration conglomerate
    AutoInsert 1
  EndArgument
End
#
# This implements Statex, which creates an unnumbered line in an algorithm.
#
Style "Empty statement"
  Category "Statements"
  LatexType Command
  LatexName "Statex"
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "<unnumbered blank line>"
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
  KeepEmpty 1
End
#
# This implements the Ensure statement.
#
Style Ensure
  Category "Statements"
  LatexType Command
  LatexName "Ensure"
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Ensure  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
# This implements the Require statement
#
Style Require
  Category "Statements"
  LatexType Command
  LatexName "Require"
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Require  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
# The Return style inserts a statement beginning with "return"
# in bold. (This is not part of the algpseudocode package.)
#
Style Return
  Category "Statements"
  LatexType Command
  LatexName "returnstmt"
  Preamble
    \newcommand{\returnstmt}[1]{\State \textbf{return} #1}
  EndPreamble
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Return  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
# State is how you enter typical pseudocode statements.
#
Style State
  Category "Statements"
  LatexType Command
  LatexName "State"
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "State  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
#  ----- Insets -----
#
# The "Code comment" inset allows you to add comments to other
# pseudocode entries (such as statements).
#
InsetLayout "Flex:Code comment"
  LyxType Custom
  LatexType Command
  LatexName "Comment"
  LabelString "comment"
End

