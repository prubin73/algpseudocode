#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
#\DeclareLyXModule[algpseudocode.sty]{Pseudocode}
#DescriptionBegin
# Adds support for pseudocode formatting using the algorithmicx package.
#DescriptionEnd
# Author: Paul A. Rubin <rubin@msu.edu>
Format 66
Preamble
    \usepackage{algpseudocode}
EndPreamble
#
# ----- Basics -----
#
# The Algorithm environment is the container for all pseudocode.
#
Style Algorithm
  Category "Pseudocode"
  LatexType Environment
  LatexName "algorithmic"
  KeepEmpty 1
  Argument 1
    LabelString "Line numbering"
    MenuString "Set line numbering"
    Tooltip "0 for no line number, n for line numbers in multiples of n"
    Mandatory 0
  EndArgument
  AutoNests
    Statement, Function, Procedure, For, Loop, Repeat, While, If,
    Ensure, Require, Call, Statex
  EndAutoNests
  LabelType Above
  LabelString "Begin algorithm"
  EndLabelType Static
  EndLabelString "End algorithm"
  LabelFont
    Color green
    Series bold
  EndFont
End
#
# This implements functions.
#
Style Function
  Category "Pseudocode"
  LatexType Environment
  LatexName "pseudofunction"
  Preamble
    \newenvironment{pseudofunction}[2]{\Function{#1}{#2}}{\EndFunction}
  EndPreamble
  LabelType Above
  LabelString "Begin function"
  EndLabelType Static
  EndLabelString "End function"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement, Return, Ensure, Require
  EndAutoNests
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "name"
    MenuString "Enter the function name"
    Tooltip "Specify a name for the function"
    Mandatory 1
  EndArgument
  Argument 2
    LabelString "parameters"
    MenuString "List the arguments of the function"
    Tooltip "Specify the arguments of the function"
    Mandatory 1
  EndArgument
End
#
# This implements procedures.
#
Style Procedure
  Category "Pseudocode"
  LatexType Environment
  LatexName "pseudoproc"
  Preamble
    \newenvironment{pseudoproc}[2]{\Procedure{#1}{#2}}{\EndProcedure}
  EndPreamble
  LabelType Above
  LabelString "Begin procedure"
  EndLabelType Static
  EndLabelString "End procedure"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement, Ensure, Require
  EndAutoNests
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "name"
    MenuString "Enter the procedure name"
    Tooltip "Specify a name for the procedure"
    Mandatory 1
  EndArgument
  Argument 2
    LabelString "parameters"
    MenuString "List the arguments of the procedure"
    Tooltip "Specify the arguments of the procedure"
    Mandatory 1
  EndArgument
End
#
# Statement is how you enter typical pseudocode statements.
#
Style Statement
  Category "Pseudocode"
  LatexType Command
  LatexName "State"
  IsAutoNestedBy
    Algorithm, For, Repeat, Loop, While, If, Else, "Else if",
    Function, Procedure
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Statement:  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
# The "Code comment" inset allows you to add comments to other
# pseudocode entries (such as statements).
#
InsetLayout "Flex:Code comment"
  LyxType Custom
  LatexType Command
  LatexName "Comment"
  LabelString "comment"
End
#
# ----- LOOPING -----
#
# This style implements for loops.
#
Style For
  Category "Looping"
  LatexType Environment
  LatexName "forloop"
  Preamble
    \newenvironment{forloop}[1]{\For{#1}}{\EndFor}
  EndPreamble
  LabelType Above
  LabelString "Begin for"
  EndLabelType Static
  EndLabelString "End for"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement
  EndAutoNests
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "loop condition"
    MenuString "Set loop condition"
    Tooltip "Specify the conditions for iterating"
    Mandatory 1
  EndArgument
End
#
# This implements plain loops.
#
Style Loop
  Category "Looping"
  LatexType Environment
  LatexName "loopblock"
  Preamble
    \newenvironment{loopblock}{\Loop}{\EndLoop}
  EndPreamble
  LabelType Above
  LabelString "Begin loop"
  EndLabelType Static
  EndLabelString "End loop"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement
  EndAutoNests
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "termination condition"
    MenuString "Set termination condition"
    Tooltip "Specify the conditions for terminating the loop"
    Mandatory 1
  EndArgument
End
#
# This implements repeat blocks.
#
Style Repeat
  Category "Looping"
  LatexType Environment
  LatexName "repeatblock"
  Preamble
    \newsavebox{\untilthis}
    \newenvironment{repeatblock}[1]{\sbox{\untilthis}{#1}\Repeat}{\Until{\usebox{\untilthis}}}
  EndPreamble
  LabelType Above
  LabelString "Begin repeat"
  EndLabelType Static
  EndLabelString "End repeat"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement
  EndAutoNests
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "termination condition"
    MenuString "Set termination condition"
    Tooltip "Specify the conditions for terminating the loop"
    Mandatory 1
  EndArgument
End
#
# This implements while loops.
#
Style While
  Category "Looping"
  LatexType Environment
  LatexName "whileloop"
  Preamble
    \newenvironment{whileloop}[1]{\While{#1}}{\EndWhile}
  EndPreamble
  LabelType Above
  LabelString "Begin while"
  EndLabelType Static
  EndLabelString "End while"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement
  EndAutoNests
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "loop condition"
    MenuString "Set loop condition"
    Tooltip "Specify the conditions for iterating"
    Mandatory 1
  EndArgument
End
#
# ----- Conditional code -----
#
# This implements if blocks.
#
Style If
  Category "Conditional"
  LatexType Environment
  LatexName "ifblock"
  Preamble
    \newenvironment{ifblock}[1]{\If{#1}}{\EndIf}
  EndPreamble
  LabelType Above
  LabelString "Begin if"
  EndLabelType Static
  EndLabelString "End if"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement, Else, "Else if"
  EndAutoNests
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "condition"
    MenuString "Set the condition"
    Tooltip "Specify the condition for executing subsequent instructions"
    Mandatory 1
  EndArgument
End
#
# This implements else blocks.
#
Style Else
  Category "Conditional"
  LatexType Environment
  LatexName "elseblock"
  Preamble
    \newenvironment{elseblock}{\Else}{}
  EndPreamble
  LabelType Above
  LabelString "Begin else"
  EndLabelType Static
  EndLabelString "End else"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement
  EndAutoNests
  IsAutoNestedBy
    If
  EndIsAutoNestedBy
  KeepEmpty 1
End
#
# This implements "else if".
#
Style "Else if"
  Category "Conditional"
  LatexType Environment
  LatexName "elseifblock"
  Preamble
    \newenvironment{elseifblock}[1]{\ElsIf{#1}}{}
  EndPreamble
  LabelType Above
  LabelString "Begin else if"
  EndLabelType Static
  EndLabelString "End else if"
  LabelFont
    Color green
    Series bold
  EndFont
  AutoNests
    Statement
  EndAutoNests
  IsAutoNestedBy
    If
  EndIsAutoNestedBy
  KeepEmpty 1
  Argument 1
    LabelString "condition"
    MenuString "Set the condition"
    Tooltip "Specify the condition for executing subsequent instructions"
    Mandatory 1
  EndArgument
End
#
# ----- Miscellaneous -----
#
#
# This implements a procedure call.
#
Style Call
  Category "Miscellaneous"
  LatexType Command
  LatexName "statecall"
  Preamble
    \newcommand{\statecall}[2]{\State \Call{#1}{#2}}
  EndPreamble
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Call:  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
  Argument 1
    LabelString "name"
    MenuString "Insert procedure name"
    Tooltip "Specify the name of the procedure to call"
    Mandatory 1
  EndArgument
End
#
# This implements the Ensure statement.
#
Style Ensure
  Category "Miscellaneous"
  LatexType Command
  LatexName "Ensure"
  IsAutoNestedBy
    Algorithm, Function, Procedure
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Ensure:  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
# This implements the Require statement
#
Style Require
  Category "Miscellaneous"
  LatexType Command
  LatexName "Require"
  IsAutoNestedBy
    Algorithm, Function, Procedure
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Require:  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
# The Return style inserts a statement beginning with "return"
# in bold. (This is not part of the algpseudocode package.)
#
Style Return
  Category "Miscellaneous"
  LatexType Command
  LatexName "returnstmt"
  Preamble
    \newcommand{\returnstmt}[1]{\State \textbf{return} #1}
  EndPreamble
  IsAutoNestedBy
    Function
  EndIsAutoNestedBy
  LabelType Static
  LabelString "Return:  "
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
End
#
# This implements Statex, which creates an unnumbered line in an algorithm.
#
Style Statex
  Category "Miscellaneous"
  LatexType Command
  LatexName "Statex"
  IsAutoNestedBy
    Algorithm
  EndIsAutoNestedBy
  LabelType Static
  LabelString "<inserted unnumbered blank line>"
  LabelFont
    Color green
    Series bold
  EndFont
  Margin Dynamic
  KeepEmpty 1
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Test Document
\end_layout

\begin_layout Standard
This document contains a bunch of algorithmic gibberish, intended only to
 test the features of a module supporting the 
\family typewriter
algpseudocode
\family default
 style file (part of the 
\family typewriter
algorithmx
\family default
 \SpecialChar LaTeX
 package).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Require
having a home
\end_layout

\begin_layout Ensure
being heard
\end_layout

\begin_layout Statement
Hi 
\begin_inset Flex Code comment
status open

\begin_layout Plain Layout
I'm home
\end_layout

\end_inset


\end_layout

\begin_layout Statement
Bye 
\end_layout

\begin_layout Statex

\end_layout

\begin_layout Statement
See ya
\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Some Random Algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
Get ready
\end_layout

\begin_layout For
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $i=0;i\le N;i++$
\end_inset


\end_layout

\end_inset


\begin_inset Flex Code comment
status open

\begin_layout Plain Layout
for each index
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
Step 1
\end_layout

\begin_layout Statement
Step 2
\end_layout

\end_deeper
\begin_layout For

\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
For Loop
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Repeat
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $x_{i}=0$
\end_inset


\end_layout

\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
x
\end_layout

\end_deeper
\begin_layout Repeat

\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Repeat Block
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Loop
\begin_inset Separator plain
\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
Do this
\end_layout

\begin_layout Statement
Do that
\end_layout

\end_deeper
\begin_layout Loop

\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Plain Loop
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout For
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout For
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $i=1,\dots,N$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Repeat
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $x>\pi$
\end_inset


\end_layout

\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
\begin_inset Formula $x\leftarrow x+1$
\end_inset


\end_layout

\end_deeper
\begin_layout Repeat

\end_layout

\begin_layout Plain Layout
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout While
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset

>0.1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
\begin_inset Formula $x\leftarrow x/2$
\end_inset


\end_layout

\end_deeper
\begin_layout While

\end_layout

\end_deeper
\begin_layout For

\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nested Loops
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
read 
\begin_inset Formula $x$
\end_inset


\end_layout

\begin_layout If
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $x>\Gamma$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
do something silly
\end_layout

\begin_layout Else if
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $x<\rho$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
pause for breath
\end_layout

\begin_layout Statement
get a grip
\end_layout

\end_deeper
\begin_layout Else if

\end_layout

\begin_layout Else

\end_layout

\begin_deeper
\begin_layout Statement
do something really silly
\end_layout

\end_deeper
\begin_layout Else

\end_layout

\end_deeper
\begin_layout If

\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
If Block
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Function
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Gazinta
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
\begin_inset Formula $x,y$
\end_inset


\end_layout

\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
\begin_inset Formula $z\leftarrow x/y$
\end_inset


\end_layout

\begin_layout Return
\begin_inset Formula $z$
\end_inset


\end_layout

\end_deeper
\begin_layout Function

\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Function
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Procedure
\noindent
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Invert
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_deeper
\begin_layout Statement
\begin_inset Formula $x\leftarrow\frac{1}{x}$
\end_inset


\end_layout

\end_deeper
\begin_layout Procedure

\end_layout

\begin_layout Call
\begin_inset Formula $\exp(-1)$
\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Invert
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Algorithm

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Procedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
